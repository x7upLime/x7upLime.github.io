<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cgroups on andrewdomain Blog</title>
    <link>/tags/cgroups/</link>
    <description>Recent content in cgroups on andrewdomain Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2024 11:39:50 +0200</lastBuildDate>
    <atom:link href="/tags/cgroups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ricetta: limite di memoria tramite cgroups</title>
      <link>/posts/ricetta-mem_limit_rest_cgroups/</link>
      <pubDate>Thu, 19 Sep 2024 11:39:50 +0200</pubDate>
      <guid>/posts/ricetta-mem_limit_rest_cgroups/</guid>
      <description>Mostreremo come confinare un&amp;rsquo;applicazione tramite cgroup rispetto alla memoria, creando le condizioni di osservare quello che accade vicino &amp;ldquo;al limite&amp;rdquo;, senza andare ad intaccare le risorse del nostro sistema operativo.&#xA;ingredienti un go compiler (dnf install go su Fedora) una shell (nella ricetta userò la varietà bash) un kernel Linux ad una versione recente privilegi di root sul sistema Procedura Ad alto livello:&#xA;Necessiteremo di un applicativo da confinare, ci occuperemo del setup dei cgroup sul nostro sistema Linux, terremo monitorata la situazione per vedere gli effetti sul nostro applicativo.</description>
    </item>
    <item>
      <title>cgroups_fork-bomb</title>
      <link>/posts/cgroups_fork-bomb/</link>
      <pubDate>Sun, 08 Sep 2024 19:53:16 +0200</pubDate>
      <guid>/posts/cgroups_fork-bomb/</guid>
      <description>La command line che vado a mostrarvi non è materiale accademico, è forse più parte della cultura underground del mondo unix:&#xA;:() { :|:&amp;amp; };: &amp;ndash; la fork bomb di Bash&#xA;su bash questa command line viene interpretata come la definzione di una funzione chiamata &amp;lsquo;:&amp;rsquo;, il cui corpo prevede una chiamata a se stessa ed una seconda chiamata in ascolto sull&amp;rsquo;input della prima (che non arriva mai) per bloccare il process e impedirgli di uscire, il tutto in background.</description>
    </item>
  </channel>
</rss>

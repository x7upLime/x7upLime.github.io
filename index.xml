<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>andrewdomain Blog</title>
    <link>/</link>
    <description>Recent content on andrewdomain Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Sep 2024 11:39:50 +0200</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ricetta: limite di memoria per una (mock) REST API tramite cgroups</title>
      <link>/posts/ricetta-mem_limit_rest_cgroups/</link>
      <pubDate>Thu, 19 Sep 2024 11:39:50 +0200</pubDate>
      <guid>/posts/ricetta-mem_limit_rest_cgroups/</guid>
      <description>Mostreremo come confinare un&amp;rsquo;applicazione tramite cgroup rispetto alla memoria, creando le condizioni di osservare quello che accade vicino &amp;ldquo;al limite&amp;rdquo;, senza andare ad intaccare le risorse del nostro sistema operativo.&#xA;ingredienti un go compiler (dnf install go su Fedora) una shell (nella ricetta userò la varietà bash) un kernel Linux ad una versione recente privilegi di root sul sistema Procedura Ad alto livello:&#xA;Necessiteremo di un applicativo da confinare, ci occuperemo del setup dei cgroup sul nostro sistema Linux, terremo monitorata la situazione per vedere gli effetti sul nostro applicativo.</description>
    </item>
    <item>
      <title>cgroups_fork-bomb</title>
      <link>/posts/cgroups_fork-bomb/</link>
      <pubDate>Sun, 08 Sep 2024 19:53:16 +0200</pubDate>
      <guid>/posts/cgroups_fork-bomb/</guid>
      <description>La command line che vado a mostrarvi non è materiale accademico, è forse più parte della cultura underground del mondo unix:&#xA;:() { :|:&amp;amp; };: &amp;ndash; la fork bomb di Bash&#xA;su bash questa command line viene interpretata come la definzione di una funzione chiamata &amp;lsquo;:&amp;rsquo;, il cui corpo prevede una chiamata a se stessa ed una seconda chiamata in ascolto sull&amp;rsquo;input della prima (che non arriva mai) per bloccare il process e impedirgli di uscire, il tutto in background.</description>
    </item>
    <item>
      <title>A_brief_story_of_hier</title>
      <link>/posts/a_brief_story_of_hier/</link>
      <pubDate>Sun, 07 Jan 2024 21:33:38 +0200</pubDate>
      <guid>/posts/a_brief_story_of_hier/</guid>
      <description>Recently Fedora opened this curious Change proposal about the unification of the /bin and /sbin paths.&#xA;The news was welcomed by the community with short oneline sentences, that didn&amp;rsquo;t help me understand the connotations of that proposal so I thought about using the occasion to do some little research to make light on this matter&amp;hellip;&#xA;What I found out is that Fedora was not the first distro to implement this choice, but was one of the first ones to start this 10+ years old discussion about reforming the filesystem hierarchy under Linux, which now is reaching a more advanced state.</description>
    </item>
    <item>
      <title>notes on `Rootless`</title>
      <link>/posts/rootless/</link>
      <pubDate>Mon, 06 Feb 2023 11:44:12 +0200</pubDate>
      <guid>/posts/rootless/</guid>
      <description>Rootless is one big deal in the container-new-world-order; was one of podman&amp;rsquo;s most captivating features.. then everyone seem to have moved to(supported) rootless.&#xA;Community efforts were made to demistify the rootless mechanism, then everyone was adding support to rootless&amp;hellip; But how does it work? Does it work only for containers?&#xA;Of course it doesn&amp;rsquo;t work only for containers.. the whole rootless-thingy relies on the namespaces mechanism, which is something that lives in the linux kernel(maybe other kernels as well.</description>
    </item>
    <item>
      <title>Container Adventures 2</title>
      <link>/posts/container-adventures2/</link>
      <pubDate>Mon, 23 Jan 2023 15:17:23 +0200</pubDate>
      <guid>/posts/container-adventures2/</guid>
      <description>This whole thing happened after a couple of more trials in the container world and gave birth to those foolish junior prs/issues on kubernetes/minikube&#xA;#15678 ca3&#xA;#15696 ca3&#xA;#15677 ca3 - the issue.. but the discussion is on slack&#xA;#15491 ca3 &amp;ndash; not able to rebase + change in workflow&#xA;#15697 the create-volume bug&#xA;#15699 the create-volume proposed solution&#xA;Solving container creation issues for the podman driver &amp;ndash; minikube We were able to merge the newly proposed cache-invalidation mechanism (not yet actually.</description>
    </item>
    <item>
      <title>Container Adventures 1</title>
      <link>/posts/container-adventures1/</link>
      <pubDate>Tue, 22 Nov 2022 22:44:11 +3100</pubDate>
      <guid>/posts/container-adventures1/</guid>
      <description>Since this is the first post.. I may start by saying that this will be a series documenting my learning process for containers/golang.&#xA;I&amp;rsquo;m finding out about myself, that I tend to implement the head-first approach when I have no clear ideas about what I&amp;rsquo;m doing.. That would mean that I&amp;rsquo;ll definitely (when not bothering the community.. or the community not answering me) be drawing conclusions and answering the conclusions that I drew myself.</description>
    </item>
    <item>
      <title>when work meets interests</title>
      <link>/posts/awx-go/</link>
      <pubDate>Fri, 07 Oct 2022 21:23:17 +0200</pubDate>
      <guid>/posts/awx-go/</guid>
      <description>Let&amp;rsquo;s look at the problem.. It all started when I was put on the infrastructure patching for the linux machines, in an awx/git infrastructure;&#xA;I had to patch a number of services, with an almost equal number of related ansible playbooks on git, and a much lower number of equivalent awx projects&amp;hellip;&#xA;The previous management suggested me to do the update work by hand,&#xA;creating for each missing ansible project on awx:</description>
    </item>
  </channel>
</rss>
